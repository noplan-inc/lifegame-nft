{"version":3,"sources":["../node_modules/@zoralabs/media-metadata-schemas/dist/schemas sync /^/.//.*/.json$","utils/helper.ts","container/board.tsx","presentational/boardView.tsx","utils/connectors.ts","utils/loader.ts","container/zora.tsx","App.tsx","hooks.ts","reportWebVitals.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","isTop","size","index","isBottom","isRight","isLeft","filterIndex","arr","arrIndex","cellIndex","filter","cell","includes","createNeighbourIndex","top","left","right","bottom","center","isLeftTop","isRightTop","isLeftBottom","isRightBottom","setInitCellNeighbours","neighbours","restoreCells","ecs","cells","cc","createBoardStatus","Array","fill","live","setInitCellLive","spawnRate","Math","floor","random","setInitCellId","Board","props","state","boardStatus","timerId","componentDidMount","initBoardStatus","hasFinished","every","countLivingNeighbours","neighbourList","num","cellLive","length","canLive","isLive","liveCount","runLifeCycle","nextBoardStatus","setState","boardSize","initStatus","newStatus","start","intervalTime","setInterval","stop","clearInterval","setCells","render","cellSize","mode","childrenProps","React","reloadPage","window","location","reload","generateStyle","border","display","width","height","margin","padding","lineHeight","background","boxSizing","borderTop","borderLeft","borderRight","borderBottom","cellClickHandler","a","cs","newCells","c","isEditor","printHandler","compressCells","output","sqrt","json","JSON","stringify","console","log","onChange","val","eCells","parse","currentTarget","value","type","onClick","style","fontSize","injected","InjectedConnector","supportedChainIds","loadCellsFromContentUrl","url","fetch","resp","ok","exportedCell","ListZora","useWeb3React","library","chainId","useState","boards","setBoards","useEffect","undefined","signer","getSigner","zora","Zora","bsc","media","market","fetchTotalMedia","big","_boards","i","toNumber","fetchContentURI","contentUrl","push","f","b","App","connector","active","error","activate","setError","activatingConnector","setActivatingConnector","triedEager","tried","setTried","isAuthorized","then","catch","useEagerConnect","suppress","ethereum","on","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getLibrary","provider","Web3Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4576593d.chunk.js","sourcesContent":["var map = {\n\t\"./zora/20210101.json\": 439\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 438;","type CheckPosition = (size: number, index: number) => boolean;\n\nexport const isTop: CheckPosition = (size, index) => index < size;\n\nexport const isBottom: CheckPosition = (size, index) =>\n    index <= size * size - 1 && index > size * size - size - 1;\n\nexport const isRight: CheckPosition = (size, index) =>\n    index !== 0 && index % size === size - 1;\n\nexport const isLeft: CheckPosition = (size, index) => index % size === 0;\n\nexport const isLeftTop: CheckPosition = (size, index) =>\n    isLeft(size, index) && isTop(size, index);\n\nexport const isRightTop: CheckPosition = (size, index) =>\n    isRight(size, index) && isTop(size, index);\n\nexport const isLeftBottom: CheckPosition = (size, index) =>\n    isLeft(size, index) && isBottom(size, index);\n\nexport const isRightBottom: CheckPosition = (size, index) =>\n    isRight(size, index) && isBottom(size, index);\n\ntype GetIndexList = (size: number, index: number) => number[];\nconst cellIndex: GetIndexList = (size, index) => [\n    index - size - 1,\n    index - size,\n    index - size + 1,\n    index - 1,\n    index,\n    index + 1,\n    index + size - 1,\n    index + size,\n    index + size + 1,\n];\n\nconst filterIndex = (arr: number[], size: number, arrIndex: number): number[] =>\n    cellIndex(size, arrIndex).filter((cell, index) => !arr.includes(index));\n\nexport const createNeighbourIndex: GetIndexList = (size, index) => {\n    const top: number[] = [0, 1, 2];\n    const left: number[] = [0, 3, 6];\n    const right: number[] = [2, 5, 8];\n    const bottom: number[] = [6, 7, 8];\n    const center: number[] = [4];\n\n    if (isLeftTop(size, index)) {\n        return filterIndex([...top, ...left, ...center], size, index);\n    }\n\n    if (isRightTop(size, index)) {\n        return filterIndex([...right, ...top, ...center], size, index);\n    }\n\n    if (isLeftBottom(size, index)) {\n        return filterIndex([...left, ...bottom, ...center], size, index);\n    }\n\n    if (isRightBottom(size, index)) {\n        return filterIndex([...right, ...bottom, ...center], size, index);\n    }\n\n    if (isTop(size, index)) {\n        return filterIndex([...top, ...center], size, index);\n    }\n\n    if (isLeft(size, index)) {\n        return filterIndex([...left, ...center], size, index);\n    }\n\n    if (isRight(size, index)) {\n        return filterIndex([...right, ...center], size, index);\n    }\n\n    if (isBottom(size, index)) {\n        return filterIndex([...bottom, ...center], size, index);\n    }\n\n    return filterIndex(center, size, index);\n};\n\ntype CellNeighbours = { neighbours: number[] };\n\nexport const setInitCellNeighbours = (\n    size: number,\n    index: number\n): CellNeighbours => ({\n    neighbours: createNeighbourIndex(size, index),\n});\n\nexport interface ExportedCells {\n    cells: CompressCell[];\n    size: number;\n}\n\nexport interface CompressCell {\n    id: string;\n    live: boolean;\n}\n\nexport const restoreCells = (ecs: ExportedCells): Cell[] => {\n    return ecs.cells.map((cc, index) => {\n        return {\n            ...cc,\n            ...setInitCellNeighbours(ecs.size, index),\n        };\n    });\n};\n","import * as React from 'react';\nimport { setInitCellNeighbours } from '../utils/helper';\n\nconst initCell = (): Cell => ({\n    id: '',\n    live: false,\n    neighbours: [],\n});\n\nconst createBoardStatus = (size: number): Cell[] =>\n    new Array(size * size).fill(initCell());\n\ntype CellLive = { live: boolean };\nconst setInitCellLive = (spawnRate: number): CellLive => ({\n    live: spawnRate > Math.floor(Math.random() * 100),\n});\n\ntype CellId = { id: string };\nconst setInitCellId = (index: number): CellId => ({\n    id: `id${index || 0}`,\n});\n\ntype BoardContainerProps = {\n    intervalTime: number;\n    cellSize: number;\n    spawnRate: number;\n    boardSize: number;\n    initStatus?: Cell[];\n    mode: 'editor' | 'viewer';\n    render: (props: BoardViewProps) => JSX.Element;\n};\n\ntype BoardState = {\n    boardStatus: Cell[];\n    timerId: number;\n};\n\nclass Board extends React.Component {\n    props: BoardContainerProps = this.props;\n\n    state: BoardState = {\n        boardStatus: [],\n        timerId: 0,\n    };\n\n    componentDidMount = (): void => {\n        this.initBoardStatus();\n    };\n\n    hasFinished = (): boolean => {\n        const { boardStatus } = this.state;\n        return boardStatus.every((cell: Cell) => !cell.live);\n    };\n\n    countLivingNeighbours = (neighbourList: number[]): number => {\n        const { boardStatus }: { boardStatus: Cell[] } = this.state;\n        const live = neighbourList.map(\n            (num: number): boolean => boardStatus[num].live\n        );\n\n        return live.filter((cellLive) => cellLive).length;\n    };\n\n    canLive = (neighbourList: number[], isLive: boolean): boolean => {\n        const liveCount = this.countLivingNeighbours(neighbourList);\n\n        if (liveCount >= 4 || liveCount <= 1) {\n            return false;\n        }\n\n        if (liveCount === 3) {\n            return true;\n        }\n\n        if (isLive && liveCount === 2) {\n            return true;\n        }\n\n        return isLive;\n    };\n\n    runLifeCycle = () => {\n        if (this.hasFinished()) {\n            return;\n        }\n\n        const { boardStatus }: { boardStatus: Cell[] } = this.state;\n        const nextBoardStatus: Cell[] = boardStatus.map((cell) => {\n            const live = this.canLive(cell.neighbours, cell.live);\n            return { ...cell, live };\n        });\n\n        this.setState({ boardStatus: nextBoardStatus });\n    };\n\n    initBoardStatus = () => {\n        const { spawnRate, boardSize, initStatus } = this.props;\n        if (initStatus) {\n            return this.setState({\n                boardStatus: initStatus,\n            });\n        }\n\n        const newStatus: Cell[] = createBoardStatus(boardSize).map(\n            (cell: Cell, index: number) => ({\n                ...cell,\n                ...setInitCellId(index),\n                ...setInitCellLive(spawnRate),\n                ...setInitCellNeighbours(boardSize, index),\n            })\n        );\n\n        this.setState({\n            boardStatus: newStatus,\n        });\n    };\n\n    start = () => {\n        const { runLifeCycle } = this;\n        const { intervalTime } = this.props;\n        const timerId = setInterval(runLifeCycle, intervalTime);\n\n        this.setState({\n            ...this.state,\n            timerId,\n        });\n    };\n\n    stop = () => {\n        clearInterval(this.state.timerId);\n    };\n\n    setCells = (cells: Cell[]) => {\n        this.setState({\n            ...this.state,\n            boardStatus: cells,\n        });\n    };\n\n    render = () => {\n        const { boardSize, cellSize, render, mode } = this.props;\n        const { boardStatus }: { boardStatus: Cell[] } = this.state;\n\n        const childrenProps: BoardViewProps = {\n            boardSize,\n            cellSize,\n            boardStatus,\n            mode,\n            start: this.start,\n            stop: this.stop,\n            setCells: this.setCells,\n        };\n\n        return <div>{render(childrenProps)}</div>;\n    };\n}\n\nexport default Board;\n","import React from 'react';\nimport {\n    isRight,\n    isBottom,\n    restoreCells,\n    ExportedCells,\n} from '../utils/helper';\n\nconst reloadPage = (): void => window.location.reload();\n\ntype GenerateStyle = (\n    cellSize: number,\n    live: boolean,\n    boardSize: number,\n    index: number\n) => React.CSSProperties;\n\nconst generateStyle: GenerateStyle = (cellSize, live, boardSize, index) => {\n    const border = '1px solid #000';\n    return {\n        display: 'inline-block',\n        width: `${cellSize}px`,\n        height: `${cellSize}px`,\n        margin: 0,\n        padding: 0,\n        lineHeight: 0,\n        background: live ? '#000' : '#fff',\n        boxSizing: 'border-box',\n        borderTop: border,\n        borderLeft: border,\n        borderRight: isRight(boardSize, index) ? border : 'none',\n        borderBottom: isBottom(boardSize, index) ? border : 'none',\n    };\n};\n\nconst Board = (props: BoardViewProps) => {\n    const {\n        boardSize,\n        cellSize,\n        boardStatus,\n        start,\n        stop,\n        setCells,\n        mode,\n    } = props;\n\n    const cellClickHandler = async (cell: Cell) => {\n        const cs = [...boardStatus];\n        const newCells = cs.map((c) => {\n            return {\n                ...c,\n                live: c.id === cell.id ? !c.live : c.live,\n            };\n        });\n        setCells(newCells);\n    };\n\n    const isEditor = mode === 'editor';\n\n    const printHandler = async () => {\n        const compressCells = boardStatus.map((cell) => {\n            return {\n                id: cell.id,\n                live: cell.live,\n            };\n        });\n        const output = {\n            size: Math.sqrt(boardStatus.length),\n            cells: compressCells,\n        };\n        const json = JSON.stringify(output);\n        console.log(json);\n    };\n\n    return (\n        <div>\n            {isEditor ? (\n                <textarea\n                    onChange={(val) => {\n                        const eCells = JSON.parse(\n                            val.currentTarget.value\n                        ) as ExportedCells;\n\n                        const cells = restoreCells(eCells);\n                        setCells(cells);\n                    }}\n                />\n            ) : (\n                <></>\n            )}\n\n            <div>\n                <button type=\"button\" onClick={start}>\n                    start\n                </button>\n                <button type=\"button\" onClick={reloadPage}>\n                    reload\n                </button>\n                <button type={'button'} onClick={stop}>\n                    stop\n                </button>\n                {isEditor ? (\n                    <button type={'button'} onClick={printHandler}>\n                        print\n                    </button>\n                ) : (\n                    <></>\n                )}\n            </div>\n\n            <div style={{ fontSize: 0 }}>\n                {boardStatus.map(\n                    (cell: Cell, index: number): React.ReactNode => (\n                        <span key={cell.id}>\n                            <i\n                                style={generateStyle(\n                                    cellSize,\n                                    cell.live,\n                                    boardSize,\n                                    index\n                                )}\n                                onClick={async () => {\n                                    await cellClickHandler(cell);\n                                }}\n                            />\n                            {isRight(boardSize, index) && <br />}\n                        </span>\n                    )\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Board;\n","import { InjectedConnector } from '@web3-react/injected-connector';\n\nexport const injected = new InjectedConnector({\n    supportedChainIds: [1, 3, 4, 5, 42, 97],\n});\n","import { restoreCells } from './helper';\n\nexport const loadCellsFromContentUrl = async (url: string): Promise<Cell[]> => {\n    const resp = await fetch(url);\n    if (!resp.ok) {\n        return [];\n    }\n\n    const exportedCell = await resp.json();\n\n    if (!exportedCell.size) {\n        return [];\n    }\n    return restoreCells(exportedCell);\n};\n","import React, { useState } from 'react';\nimport { Zora } from '@zoralabs/zdk';\nimport { useWeb3React } from '@web3-react/core';\nimport { Web3Provider } from '@ethersproject/providers';\n\nimport bsc from '../addresses/bsc-testnet.json';\nimport { useEffect } from 'react';\nimport { loadCellsFromContentUrl } from '../utils/loader';\nimport BoardView from '../presentational/boardView';\nimport Board from './board';\n\nexport const ListZora: React.FC<{}> = () => {\n    const { library, chainId } = useWeb3React<Web3Provider>();\n\n    const [boards, setBoards] = useState<Cell[][]>([]);\n\n    useEffect(() => {\n        async function f() {\n            if (library === undefined || chainId === undefined) {\n                return;\n            }\n\n            const signer = library.getSigner();\n\n            const zora = new Zora(signer, chainId, bsc.media, bsc.market);\n\n            const big = await zora.fetchTotalMedia();\n\n            const _boards: Cell[][] = [];\n\n            // 0, 1 => stash data\n            for (let i = 2; i < 2 + big.toNumber(); i++) {\n                const contentUrl = await zora.fetchContentURI(i);\n                const cells = await loadCellsFromContentUrl(contentUrl);\n                _boards.push(cells);\n            }\n\n            setBoards([..._boards]);\n        }\n        f();\n    }, [library, chainId]);\n\n    return (\n        <>\n            {boards.map((b, index) => {\n                return (\n                    <div key={index}>\n                        <Board\n                            mode={'viewer'}\n                            intervalTime={500}\n                            cellSize={20}\n                            spawnRate={25}\n                            boardSize={Math.sqrt(b.length)}\n                            initStatus={b}\n                            render={(props: BoardViewProps) => (\n                                <BoardView {...props} />\n                            )}\n                        />\n                    </div>\n                );\n            })}\n        </>\n    );\n};\n","import React from 'react';\n// @ts-ignore\nimport Board from './container/board';\nimport './App.css';\nimport BoardView from './presentational/boardView';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEagerConnect, useInactiveListener } from './hooks';\n\nimport { injected } from './utils/connectors';\nimport { ListZora } from './container/zora';\n\nfunction App() {\n    const {\n        connector,\n        active,\n        error,\n        activate,\n        setError,\n    } = useWeb3React<Web3Provider>();\n\n    const [activatingConnector, setActivatingConnector] = React.useState<any>();\n    React.useEffect(() => {\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined);\n        }\n    }, [activatingConnector, connector]);\n\n    const triedEager = useEagerConnect();\n\n    useInactiveListener(!triedEager || !!activatingConnector);\n\n    return (\n        <div className=\"App\">\n            <div>\n                connected: {JSON.stringify(triedEager)}, account:{' '}\n                {JSON.stringify({ active, error, activate, setError })}\n            </div>\n            <div>\n                <button\n                    onClick={() => {\n                        activate(injected).then();\n                    }}\n                >\n                    connect\n                </button>\n            </div>\n            <div>\n                <h2>editor</h2>\n                <Board\n                    mode={'editor'}\n                    intervalTime={500}\n                    cellSize={20}\n                    spawnRate={25}\n                    boardSize={25}\n                    render={(props: BoardViewProps) => <BoardView {...props} />}\n                />\n            </div>\n            <div>\n                <h2>market</h2>\n                <ListZora />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\n\nimport { injected } from './utils/connectors';\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React();\n\n    const [tried, setTried] = useState(false);\n\n    useEffect(() => {\n        injected.isAuthorized().then((isAuthorized: boolean) => {\n            if (isAuthorized) {\n                activate(injected, undefined, true).catch(() => {\n                    setTried(true);\n                });\n            } else {\n                setTried(true);\n            }\n        });\n    }, []); // intentionally only running on mount (make sure it's only mounted once :))\n\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n        if (!tried && active) {\n            setTried(true);\n        }\n    }, [tried, active]);\n\n    return tried;\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n    const { active, error, activate } = useWeb3React();\n\n    useEffect((): any => {\n        const { ethereum } = window as any;\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\n            const handleConnect = () => {\n                console.log(\"Handling 'connect' event\");\n                activate(injected);\n            };\n            const handleChainChanged = (chainId: string | number) => {\n                console.log(\n                    \"Handling 'chainChanged' event with payload\",\n                    chainId\n                );\n                activate(injected);\n            };\n            const handleAccountsChanged = (accounts: string[]) => {\n                console.log(\n                    \"Handling 'accountsChanged' event with payload\",\n                    accounts\n                );\n                if (accounts.length > 0) {\n                    activate(injected);\n                }\n            };\n            const handleNetworkChanged = (networkId: string | number) => {\n                console.log(\n                    \"Handling 'networkChanged' event with payload\",\n                    networkId\n                );\n                activate(injected);\n            };\n\n            ethereum.on('connect', handleConnect);\n            ethereum.on('chainChanged', handleChainChanged);\n            ethereum.on('accountsChanged', handleAccountsChanged);\n            ethereum.on('networkChanged', handleNetworkChanged);\n\n            return () => {\n                if (ethereum.removeListener) {\n                    ethereum.removeListener('connect', handleConnect);\n                    ethereum.removeListener('chainChanged', handleChainChanged);\n                    ethereum.removeListener(\n                        'accountsChanged',\n                        handleAccountsChanged\n                    );\n                    ethereum.removeListener(\n                        'networkChanged',\n                        handleNetworkChanged\n                    );\n                }\n            };\n        }\n    }, [active, error, suppress, activate]);\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { Web3Provider } from '@ethersproject/providers';\n\n// @ts-ignore\nimport RecoilLogger from 'recoil-logger';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nfunction getLibrary(provider: any) {\n    return new Web3Provider(provider);\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <RecoilRoot>\n                <RecoilLogger />\n                <App />\n            </RecoilRoot>\n        </Web3ReactProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}